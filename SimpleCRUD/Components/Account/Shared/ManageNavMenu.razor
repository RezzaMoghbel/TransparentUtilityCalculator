@using Microsoft.AspNetCore.Identity
@using SimpleCRUD.Data
@using SimpleCRUD.Data.Models

@inject SignInManager<ApplicationUser> SignInManager
@* @inject AuthenticationStateProvider AuthProvider *@

<ul class="nav nav-pills flex-column">
    <li class="nav-item">
        <NavLink class="nav-link" href="Account/Manage" Match="NavLinkMatch.All">Profile</NavLink>
    </li>

    <li class="nav-item">
        <NavLink class="nav-link" href="Account/Manage/ChangePassword">Password</NavLink>
    </li>
@*     @if (hadSuperAdminAccessLevel)
    {
        <li class="nav-item">
            <NavLink class="nav-link" href="/Account/manage/user-approvals">User Approvals</NavLink>
        </li>
    } *@
@*     @if (hasExternalLogins)
    {
        <li class="nav-item">
            <NavLink class="nav-link" href="Account/Manage/ExternalLogins">External logins</NavLink>
        </li>
    } *@
@*     <li class="nav-item">
        <NavLink class="nav-link" href="Account/Manage/TwoFactorAuthentication">Two-factor authentication</NavLink>
    </li>
    <li class="nav-item">
        <NavLink class="nav-link" href="Account/Manage/PersonalData">Personal data</NavLink>
    </li> *@
</ul>

@code {
    private bool hasExternalLogins;
    // private bool hadSuperAdminAccessLevel = true;

    protected override async Task OnInitializedAsync()
    {
        hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();

        //  var authState = await AuthProvider.GetAuthenticationStateAsync();
        // var user = authState.User;

        // if (user.Identity?.IsAuthenticated == true)
        // {
        //     // Get the ApplicationUser from the database
        //     var appUser = await SignInManager.UserManager.GetUserAsync(user);

        //     if (appUser is not null)
        //     {
        //         // You can check by ID or Name
        //         hadSuperAdminAccessLevel = appUser.AccessLevelId == 3; // or check AccessLevel?.Name == "SuperUser"
        //     }
        // }
    }
}
