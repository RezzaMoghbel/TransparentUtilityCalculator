@page "/reports/direct-debit-balance"
@attribute [Authorize]
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using SimpleCRUD.Components.Reuseables.Lists
@using SimpleCRUD.Components.Reuseables.Shared
@using SimpleCRUD.Components.Reuseables.Status
@using SimpleCRUD.Components.Reuseables.Toasts
@using SimpleCRUD.Components.Reuseables.Utility
@using SimpleCRUD.Components.Utils
@using SimpleCRUD.DTO.Utility.DirectDebits
@using SimpleCRUD.Services
@using SimpleCRUD.Engine.DirectDebit
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavManager
@inject ToastService ToastService
@inject IJSRuntime JS

@inject IdentityUserHandler<string> IdentityUserHandler
@inject DirectDebitHandler<SimpleCRUD.DTO.Utility.DirectDebits.DirectDebitBalance> BalanceHandler
@inject DirectDebitHandler<DirectDebitMonthlyComparison> MonthlyHandler

<Toast />

<AccessLevelView>
    <PageTitle>Direct Debit Balance Report</PageTitle>

    <div class="flex-sp-list-header">
        <h1 class="px-1">Direct Debit Balance Report</h1>
    </div>

    @if (resultGetAll is null)
    {
        <p>Loading...</p>
    }
    else if (!resultGetAll.IsSuccess)
    {
        <p class="text-danger">Error: @resultGetAll.ErrorMessage</p>
    }
    else if (balances.Count == 0)
    {
        <p>No direct debits found.</p>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-2">
            <div class="d-flex align-items-center gap-2">
                <label class="form-label mb-0">Page size</label>
                <select class="form-select form-select-sm" style="width:auto"
                        @onchange="OnPageSizeChanged" value="@pageSize">
                    <option value="3">3</option>
                    <option value="5">5</option>
                    <option value="10">10</option>
                </select>
            </div>
        </div>

        <table class="table">
            <thead>
                <tr class="text-center">
                    <th class="text-start">Payment Date</th>
                    <th class="text-center">Provider</th>
                    <th class="text-center">DD Amount</th>
                    <th class="text-center">Linked Total</th>
                    <th class="text-center">Balance</th>
                    <th class="text-center">Status</th>
                    <th class="text-center">Linked Count</th>
                    <th>Actions</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var balance in PagedBalances)
                {
                    <tr class="align-content-center text-center">
                        <td class="text-start">@balance.PaymentDate.ToString("yyyy-MMM-dd")</td>
                        <td class="text-center">@(balance.ProviderName ?? "N/A")</td>
                        <td class="text-center">@balance.DirectDebitAmount.ToPounds(2)</td>
                        <td class="text-center">@balance.LinkedReadingsTotal.ToPounds(2)</td>
                        <td class="text-center">@balance.Balance.ToPounds(2)</td>
                        <td class="text-center">
                            <span class="badge @GetBalanceStatusBadgeClass(balance.BalanceStatus)">
                                @balance.BalanceStatus
                            </span>
                        </td>
                        <td class="text-center">@balance.LinkedReadingsCount</td>
                        <td class="text-center">
                            <ViewButton Route="@($"/reports/direct-debit-balance/{balance.Id}")" ExtraStyleClass="btn-sm"></ViewButton>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="d-flex justify-content-center my-3">
            <Pagination TotalItems="@balances.Count"
                        PageSize="@pageSize"
                        CurrentPage="@currentPage"
                        CurrentPageChanged="@OnPageChanged"
                        MaxVisiblePages="7" />
        </div>
    }

    <!-- Monthly Comparison Chart -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Monthly Comparison (Current Year)</h5>
                    @if (monthlyData is null)
                    {
                        <div>Loading chart...</div>
                    }
                    else if (!monthlyData.Any())
                    {
                        <div class="text-muted">No data available for chart</div>
                    }
                    else
                    {
                        <div style="height:400px">
                            <canvas id="@chartId"></canvas>
                        </div>
                        <div class="mt-3">
                            <small class="text-muted">
                                <span class="badge bg-success me-2">Green</span> Exact match
                                <span class="badge bg-warning text-dark me-2 ms-3">Yellow</span> Overpaid
                                <span class="badge bg-danger me-2 ms-3">Red</span> Underpaid
                                <span class="badge bg-secondary ms-3">Gray</span> No data
                            </small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</AccessLevelView>

@code {
    private IJSObjectReference? _chartsModule;
    private readonly string chartId = $"chartDDBalance_{Guid.NewGuid():N}";
    private IEnumerable<DirectDebitMonthlyComparison>? monthlyData;

    private Result<IEnumerable<SimpleCRUD.DTO.Utility.DirectDebits.DirectDebitBalance>>? resultGetAll;
    private List<SimpleCRUD.DTO.Utility.DirectDebits.DirectDebitBalance> balances = new();

    private int currentPage = 1;
    private int pageSize = 5;
    private IEnumerable<SimpleCRUD.DTO.Utility.DirectDebits.DirectDebitBalance> PagedBalances => balances
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    private string? userName;
    private string? userID;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        userName = authState.User.Identity?.Name;

        var result = await IdentityUserHandler.GetUserIdByUsername(userName);
        userID = result.Data;

        if (string.IsNullOrEmpty(userID))
            return;

        // Load balance data
        resultGetAll = await BalanceHandler.GetDirectDebitBalances(userID);
        if (resultGetAll.IsSuccess)
        {
            balances = resultGetAll.Data?.ToList() ?? new List<SimpleCRUD.DTO.Utility.DirectDebits.DirectDebitBalance>();
        }

        // Load monthly chart data
        var monthlyResult = await MonthlyHandler.GetMonthlyComparison(userID);
        if (monthlyResult.IsSuccess)
        {
            monthlyData = monthlyResult.Data;
        }

        // After loading monthly data, trigger re-render if already rendered
        if (_hasRendered && monthlyData?.Any() == true)
        {
            StateHasChanged();
        }
    }

    private bool _hasRendered = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _hasRendered = true;
            _chartsModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/charts.js");
        }

        // Only render chart if we have the module, data, and have completed first render
        if (_chartsModule is not null && monthlyData?.Any() == true && _hasRendered)
        {
            await RenderMonthlyChart();
        }
    }

    private async Task RenderMonthlyChart()
    {
        var sorted = monthlyData!.OrderBy(m => m.MonthStart).ToList();
        var labels = sorted.Select(m => m.MonthStart.ToString("MMM")).ToArray();
        var ddData = sorted.Select(m => (double)m.DirectDebitTotal).ToArray();
        var linkedData = sorted.Select(m => (double)m.LinkedReadingsTotal).ToArray();
        var statusData = sorted.Select(m => m.BalanceStatus).ToArray();

        await _chartsModule!.InvokeVoidAsync("renderGroupedBarChart",
            chartId, labels, ddData, linkedData, statusData, "Â£");
    }

    private void OnPageChanged(int page)
    {
        currentPage = page;
        StateHasChanged();
    }

    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newPageSize))
        {
            pageSize = newPageSize;
            currentPage = 1; // Reset to first page
            StateHasChanged();
        }
    }

    private string GetBalanceStatusBadgeClass(string status) => status switch
    {
        "Exact" => "bg-success",
        "Overpaid" => "bg-warning text-dark",
        "Underpaid" => "bg-danger",
        _ => "bg-secondary"
    };
}
