@using Microsoft.AspNetCore.Components

<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center mb-0">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="@(() => ChangePage(1))" aria-label="Previous">
                <span aria-hidden="true"><i class="bi bi-chevron-double-left"></i></span>
            </button>
        </li>
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "") me-2">
            <button class="page-link" @onclick="@(() => ChangePage(CurrentPage - 1))" aria-label="Previous">
                <span aria-hidden="true"><i class="bi bi-chevron-left"></i></span>
            </button>
        </li>

        @foreach (var page in VisiblePages)
        {
            <li class="page-item @(page == CurrentPage ? "active" : "")">
                <button class="page-link" @onclick="@(() => ChangePage(page))">@(@page)</button>
            </li>
        }

        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "") ms-2">
            <button class="page-link" @onclick="@(() => ChangePage(CurrentPage + 1))" aria-label="Next">
                <span aria-hidden="true"><i class="bi bi-chevron-right"></i></span>
            </button>
        </li>
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <button class="page-link" @onclick="@(() => ChangePage(TotalPages))" aria-label="Last">
                <span aria-hidden="true"><i class="bi bi-chevron-double-right"></i></span>
            </button>
        </li>
    </ul>
</nav>

@code {
    [Parameter] public int TotalItems { get; set; }
    [Parameter] public int PageSize { get; set; } = 10;
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public EventCallback<int> CurrentPageChanged { get; set; }
    [Parameter] public int MaxVisiblePages { get; set; } = 5;

    private int TotalPages => Math.Max(1, (int)Math.Ceiling(TotalItems / (double)PageSize));

    private IEnumerable<int> VisiblePages
    {
        get
        {
            var start = Math.Max(1, CurrentPage - MaxVisiblePages / 2);
            var end = Math.Min(TotalPages, start + MaxVisiblePages - 1);
            start = Math.Max(1, end - MaxVisiblePages + 1);
            return Enumerable.Range(start, end - start + 1);
        }
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > TotalPages || page == CurrentPage) return;
        CurrentPage = page;
        await CurrentPageChanged.InvokeAsync(page);
    }
}
