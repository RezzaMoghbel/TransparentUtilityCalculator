<ErrorDialog_InvalidOperationException @ref="ErrorDialogRef" />

<button type="button" disabled="@Disabled"
        class="btn @(IsDisallow ? "btn-outline-danger" : "btn-outline-success") @(ExtraStyleClass)"
        @onclick="ShowConfirm">
    <i class="bi @(IsDisallow ? "bi-ban" : "bi-check-circle")"></i>
</button>

@if (showConfirmation)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title @(IsDisallow ? "text-danger" : "text-success")">
                        Confirm @(IsDisallow ? "Disallow" : "Allow") Access
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirm"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to @(IsDisallow ? "disallow" : "allow") access?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseConfirm">Cancel</button>
                    <button class="btn @(IsDisallow ? "btn-danger" : "btn-success")" @onclick="ConfirmAccessChange">
                        @(IsDisallow ? "Disallow" : "Allow") Access
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter, EditorRequired] public EventCallback OnAccessChange { get; set; }
    [Parameter] public string ExtraStyleClass { get; set; } = string.Empty;
    [Parameter] public bool IsDisallow { get; set; } = true; // Default is disallow
    [Parameter] public bool Disabled { get; set; } = false;
    private ErrorDialog_InvalidOperationException? ErrorDialogRef;

    private bool showConfirmation = false;

    private void ShowConfirm() => showConfirmation = true;
    private void CloseConfirm() => showConfirmation = false;

    private async Task ConfirmAccessChange()
    {
        showConfirmation = false;

        if (!OnAccessChange.HasDelegate)
        {
            ErrorDialogRef?.Show("Action is required.");
            return;
        }

        await OnAccessChange.InvokeAsync();
    }
}
